<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>应用场景 on Open Cluster Management</title>
    <link>http://open-cluster-management.io/zh/scenarios/</link>
    <description>Recent content in 应用场景 on Open Cluster Management</description>
    <generator>Hugo -- gohugo.io</generator>
    
	<atom:link href="http://open-cluster-management.io/zh/scenarios/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Extending managed clusters with custom attributes</title>
      <link>http://open-cluster-management.io/zh/scenarios/extending-managed-clusters/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://open-cluster-management.io/zh/scenarios/extending-managed-clusters/</guid>
      <description>Under some cases we need a convenient way to extend OCM&amp;rsquo;s Managed Cluster data model so that our own custom multi-cluster system can easily work over the OCM&amp;rsquo;s native cluster api otherwise we will have to maintain an additional Kubernetes&amp;rsquo; CustomResourceDefinition in the project. OCM definitely supports developers to decorate the cluster api with minimal effort, and in the following content we will walk through that briefly.
The original cluster model in OCM &amp;ldquo;Managed Cluster&amp;rdquo; is designed to be a neat and light-weight placeholder resource of which the spec doesn&amp;rsquo;t require any additional information other than &amp;ldquo;whether the cluster is accepted or not&amp;rdquo; i.</description>
    </item>
    
    <item>
      <title>向托管集群推送Kubernetes API请求</title>
      <link>http://open-cluster-management.io/zh/scenarios/pushing-kube-api-requests/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://open-cluster-management.io/zh/scenarios/pushing-kube-api-requests/</guid>
      <description>By following the instructions in this document, an OCM hub admin will be able to &amp;ldquo;push&amp;rdquo; Kubernetes API requests to the managed clusters. The benefit of using this method for &amp;ldquo;pushing&amp;rdquo; requests in OCM is that we don&amp;rsquo;t need to explicitly configure any API endpoint for the managed clusters or provide any client credentials as preparation. We just need to enable/install the following OCM addons:
 Cluster-Proxy: Setting up the konnectivity tunnels between the hub cluster and the managed clusters so the hub cluster can connect/access the managed cluster from anywhere.</description>
    </item>
    
    <item>
      <title>部署 Kubernetes 资源</title>
      <link>http://open-cluster-management.io/zh/scenarios/deploy-kubernetes-resources/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://open-cluster-management.io/zh/scenarios/deploy-kubernetes-resources/</guid>
      <description>Prerequisites Select dev environment clusters using placement Apply the Kubernetes resources to the selected clusters  After bootstrapped the Open Cluster Management environment, you can now deploy any Kubernetes resources(such as Deployment, Service, Configmap, Secret, and so on) to your desired clusters:
 Use placement to select the desired clusters if you do not know the certain desired clusters’ name but could describe the expected characteristics of ideal clusters. Use ManifestWork to apply your Kubernetes resources to the selected clusters  Here is a sample to deploy a hello-world Deployment to the dev environment clusters:</description>
    </item>
    
  </channel>
</rss>